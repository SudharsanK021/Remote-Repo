DB2 EXPLAIN------------------------------


--------------------------------LESSON 1-----------------------------------
DBMS 
	CONTROL OF DATA REDUNDANCY
	SHARING 
	INTEGRITY(PRIMARYKEY CONSTRAINT , AND MANY OTHER CONSTRAINT)
	TRANSACTION CONTROL ( LOGICAL TRANSACTION { COMMIT AND ROLLBACK } AND THEN ONLY PHYSICAL TRANSACTIONS )
	DATA DEPENDENCY AND ACCESSING { ORGANIZED STRIUCTURE AND ACCESSING METHOD } 
	SECURITY (DBA)
	HARDWARE AND OS CHANGES( DBMS SUPPORTS ALL OS )
	
	
	LEVELS:
		CONCEPTUAL = OVERALL STRUCTURE OF DB 
		PHYSICAL = HOW DATA STORED IN DISK
		VIEW = HOW THE DATA IS VIEWED TO USER

	DATA MODEL :
		DATA OBJECTS
		OPERARIONS ON OBJECTS
		RELATIONSHIPS BTW OBJECTS
	
		TYPES :
				HIERARCHICAL 
				RELATIONAL 
				NETWORK
				
				
				
		HIERARCHICAL model:
		NOT MANY TO MANY 
		{ ROOT - PARENT - CHILD }
			PARENTS CONNECT CHILD THOROUGH PIOINTERS
				INSERT : A CHILD CANNOT EXISTS WITHOUT ATLEAST ONE PARENT
				DELETE : IF A CHILD HAS ONLY ONE PARENT THEN DELETING THE PARENT DELETES THE CHILD 
				UPDATE : UPDATE CAUSE INCONSISTENCY IF THERE THAT CHILD USED IN LOTS OF TABLES 
				
		NETWORK MODEL :
				MANY TO MANY 
				Insert : one record can exist without other existance 
				Delete : Can be done and it automatically adjusts the chain 
				Update : certain rec-column update can be done
					
		Relational Model :
			
			TABLE ALSO AS RELATION 
			TABLE -> RECORDS(HORIZONTAL ROWS) AND FIELDS(VERTICAL COLUMNS) 
			ROWS  -> TUPLES OR RECORDS 
			COLUMNS -> ATTRIBUTES OR FIELDS

			INSERT, DELETE, UPDATE : SINCE TWO SEPERATE TABLES INSERT, DELETE, UPDATE CAN BE DONE 	
			
			
			PROPERTIES:
					NO MATTER OF ORDER OF ROW , COLUMN 
					SINGLE VALUED { ONE COLUMN CAN HAVE SAME DATATYPE VALUES ONLY }
					NO DUP ROW
					IDENTIFY BY ITS ATTRIBUTE NAME 
					ATTRIBUTE OF SAME KIND 
			
		DATA INTEGRITY :----------------------------------
				CORRECTNESS OF DATA
				
				PROPERTIES : 
					PRIMARY KEY CONSTRAINT ( NO SAME PRI KEY)
					REFERENTIAL OR FORIEGN KEY INTEGRITY ( ONCE NULL OR CRT KEY VALUE IN FOREIGN TABLE )
					DELETE RESTRICT REFERENTIAL INTEGRITY ( FORIEGHN KEY ASOCIATED WITH TAB REC )
					DELETE CASCADE REFERENTIAL INTEGRITY ( IF FORIEGN KEY IN PRIMARY TABLE IS DELETED THEN REC IN RELATIONAL TABLE IS ALSO DEL)
					UPDATE CASCADE REFERENTIAL INTEGRITY ( IF FORIEGN KEY UPDATE THAT FORIEGN KEYS OWN TAB PRI KEY ALSO UPDATE )
					COLUMN CONSTRAINT 
					 
					
			
		DATA BASE ADMINSITRATOR ( DBA ):
				STUDY SYSTEM 
				SELECT THE DATA AND THE TYPE OF STRUCTURE TO HOLD THE DATA
				RESTRICT THE VIEW OF DATA 
				SECURITY **************************
			
			
LESSON 2-------------------------------- SQL 
				RULES :
				DEFAULTLY ELIMINATES THE NEW LINE 
				WHERE CLAUSE ''
				NOT CASE SENSITIVE 
				VARIABLES TAKES IT AS LOWER CASE 
				
				DQL = QUERY LANG = SELECT
				DML = INSERT , UPDATE, DELETE 
				DDL = (OBJECT LEVEL)  ALTER, CREATE, DROP
				DCL =  GRANT , REVOKE,
				TCL = COMMIT , ROLLBACK 
				
				
				IDENTIFIERS = THE NAMES OF TABLES, INDEXES, COLUMNS 
				
				SPUFI(SQL PROCESSING USING FILE INPUT) - INTERACTIVE EECUTION OF SQL COMMANDS
			
			
			
LESSON 3 ------------------------------------------------
			
			SELECT STATEMENT :
					THE RESULT IS STORED IN RESULT-SET 
					
					
				SYNTAX : 
						SELECT 
						FROM
						WHERE / GROUP BY / HAVING / ORDER BY / UNION  
			
				
				TO DISPLAY USERDEFINED COLUMN NAME IN RUNTIME
				
				SELECT LOC "LOCATION", NAME "FIRSTNAME" FROM USERDETAILS;
				
				
		OPERATORS :
						= , <> , < , > , <= , >= 
				
		COMPARISION OPERATOR :
						IN / NOT IN
						LIKE / NOT LIKE 
						IS NULL / IS NOT NULL 	
				
				LIKE OPERATOR :

					<COLUMNNAME> LIKE <PATTERN> 
			
			
					EG: 
							SELECT * FROM TABLE WHERE NAME LIKE "SU%"
					
							"U%" ANY NO OF CHARACTERS CAN BE PRESENT AFTER U 


		LOGICAL OPERATOR:
				AND 
				OR 
				NOT 
				
			PRECESDENCE : NOT > OR > AND 	
				
		ARITHMETIC PRECEDENCE :		* , / , % 



		ORDER BY : 
				MAXIMUM 255 RECORDS CAN BE SHOWN 
				PRECEDENCE -----   NUMBER > CHAR > NULL ( ASENDING ORDER ) 
				
				
				
				
LESSON 4 --------------------------------------- GROUP BY 
												 HAVING 	
												 
												 
			GROUP FUNCTIONS :									 
							SUM = WITHOUT NULL					 
							AVG = WITHOUT NULL 					 
												 
							COUNT = WITH NULL AND INCLUDING DUPLICATES 					 
												 
												 
				
				
				GROUP BY SYNTAX :
						GROUP BY < COLUMN LIST / LIST OF COLUMN NAMES  > 
						COLUMN NAMES IN GROUP BY SHOULD BE PRESENT IN SELECT CLAUSE ALSO 
						GROUP BY AND WHERE CAN BE USED IN SAME QUERY
				
				
				PRECEDENCES :
						
						WHERE > GROUP BY 
				
				GROUP FUNCTIONS TREATS ALL THE ROWS FETCHED BY QUERY AS A SINGLE GROUP
				
				
				
				
					AGGREGATE FUNCTIONS  : 		MAX , MIN , COUNT , SUM , AVG 
					SINGLE ROW FUNCTIONS :		ABS, ROUND 
				
		
GROUP FUNCTIONS :   { IGNORES NULL VALUES EXCEPT COUNT FUNC }
		
		COUNT SYNTAX :
			SELECT COUNT(*) FROM DEMOLLR 
			SELECT COUNT(DISTINCT NAME) FROM DEMOLLR 
		SUM :
			SELECT SUM(SALARY) FROM DEMOLLR 
		AVG :
			SELECT AVG(SALARY) FROM DEMOLLR 
				

WHILE USING A COLUMN ALONG WITH GROUP FUNCTIONS """"GROUP BY """" CLAUSE SHOULD BE USED 				

				
				
			HAVING:****************************************

					HAVING CLAUSE IS FURTHER FILTERATION FOR GROUP BY CLAUSE
				

PRECEDENCE :

		WHERE ----> GROUP BY ------> HAVING 
	
	
	
	
LESSON - 5-----------------------------------------------

SINGLE ROW FUNCTIONS :
				CHARACTER 
				NUMBER 
				DATE 
				CONVERSION 

**************************************SYSIBM.SYSDUMMY1 CAN BE USED FOR ALL KIND OF NUMERIC AND NON NUMERIC 	OPERATION 

			SUBSTR
					SELECT SUBSTR(VAR_NAME,START,LENGTH) 
					WHERE SUBSTR(VAR_NAME,LENGTH) = "VALUE" 
					
					IF LENGTH NOT SPECIFIED TAKES VALUE AS END OF THE STRING
					
					
					
			LENGTH(): GIVES LENGTH OF VARIABLE 


			VALUE(): 
					SYNTAX :
								SELECT NAME , CITY VALUE(CITY,0) FROM DEMOLLR 
								
										 
			DIGITS : CHARACTER REPRESENTATION OF NUMERIC VALUE 

			FLOOR : SELECTS THE LARGEST VALUE FROM TABLE 	
								
					
					
					
			DT: DEFAULT DATE TABLE 


			STRIP < COLUMN_NAME, L/T/B, SYMBOL >	
					L  -> LEADING 
					T  -> TRAILING 
					B  -> BOTH 	
					
					
					SYNTAX :
								SELECT NAME , STRIP(NAME,L/T/B,*)"sYSMBOLS IN THAT COLUMN" FROM DEMOLLR ; 
					
					
			VALUE : RETURNS THE FIRST VALUE OF THAT COLUMN WHICH IS NOT NULL 

					SYNTAX :
								SELECT VALUE(NAME) FROM DEMOLLR ;
								
								
								
								
			NUMERIC FUNCTIONS : POWER, 
								ABS,
								FLOOR,
								ROUND 
								TRUNC 
										WHICH IS USED IN WITH SYSIBM.SYSDUMMY1;
					
LESSON 6 -----------------------------------------------			
SUBQUERY -----------------------------------------------------------------------------


MAIN QUERY CAN USE {IN,NOT IN , ALL, ANY } WITH SUBQUERY 				
					
					EG: SELECT * FROM DEMOLLR WHERE NAME IN (SELECT NAME FROM DEMOLLR WHERE AGE > 21);
					
					
********************single row comparison operators (=, >, >=, <, <=, <>) can only be used in single  row  sub-queries					
					


			exists / not exists :
			EXISTS <SUB QUERY > 
					
	
UNION :{ WILL ELIMINATE DUPLICATE RECORDS} JOINS QUERIES OUTPUT }

UNION ALL : WILL NOT ELIMINATE DUPLICATE RECORDS	
	
	
LESSON 8 -----------------------------------------------			
DML      -----------------------------------------------------------------------------	
	
	
	
	*******ALL DML COMMANDS MUST BE COMMITTED BEFORE THE EXECUTION***********
	
	
	
	
	
	VIEW CAN'T HAVE A --------> DISTINCT , JOIN , UNION 
	VIEW CAN HAVE A ----------> GROUP BY, HAVING , BUT CANT UPDATE OR DELETE OR INSERT IF IT HAS GROUP BY AND HAVING 	
		
	INSERT	
	
	syntax :
		 INSERT INTO TABLENAME(COLUMNS) VALUES()
	
	SUBQUERY INSERT :( APPLICABLE ONLY IF SAME COLUMNS ARE PRESENT IN BOTH THE TABLE
			INSERT INTO USERLLR 
			SELECT * FROM DEMOLLR WHERE AGE > 20 ;
	

	DELETE 
		SYNTAX :
			DELETE FROM TABLENAME WHERE 
	
	
	UPDATE :
		SYNTAX :
		
			UPDATE TABLE SET COLUMN NAMES..... = VALUES......... WHERE 
	
	
	    
LESSON 9--------------------------------------------------------
COMPONENTS OF DB2-----------------------------------------------
	*******************************************************************
			DBRM(CONTAINS COMPILED SQL STATEMENT)  AND MOD SC(WILL HAVE COBOL)
	*******************************************************************		
	
	MVS SUBSYSTEM :
		CICS , 
		TSO
		IMS 
		DB2 
	
		
		CICS - DB2 , IMS - DB , IMS - DC , TSO - DB2
		
	SERVICES OF DB2:
			SYSTEM SERVICES
					MAINATIN LOGS 
					STARTUO AND LOGOFF OPERATIONS 
			
			DATABASE SERVICES :
					RETRIEVAL OF INFORMATION 
					
			LOCKING SERVICES :
					LOCK DATA FRO SINGLE USER'S PERFORMANCE 
					
	
	
	
	SYSTEM SERVICES :
			ALL THE INFOS OF USER AND SYSTEM DATA ARE SAVED IN DATA SET 
			
			THE INFO OF DATA SET WHIC SAVES DATA ARE SAVED IN BOOT STRAP DATA SET (BSDS)


	LOCKING SERVICES :
		IMS RESOURCE LOCKING MANAGER (IRLM) LOCKS DATA TO PREVENT CONCURRENT USE IF DATA 
		
		
	DATABASE SERVICE :
		
		IT IS DONE BY 	
				
				PRECOMPILE 
				BIND
				RUNTIME SUPERVISOR 	
				DATA MANAGER
				BUFFER MANAGER 



						PRECOMPILER : 
								COMMENTS THE SQL STATEMENTS IN APPLICAION PROGRAM AND GIVES MODIFIED SOURCE AND DBRM
											DBRM(CONTAINS COMPILED SQL STATEMENT)  AND MOD SC(WILL HAVE COBOL) IS TIED TOGETHER BY A TIMESTAMP 
								AND PUTS THEM IN DATABASE REQUEST MODULE 
								
								
						BIND : 
								WILL CHECKS FOR SQL SYNTAX 
								WILL BIND THE DBRMS TO A PLAN GIVIMG A APPLICATION PLAN AS OUTPUT 



								APPLICATION PLAN : IT HAS PALN IN WHICH WAYS TO ACCESS DB2 DATA 


PACKAGES SYNTAX :	(NO NEED TO BIND ALL PACKAGES INSTEAD JUST BIND THE CHANGED DBRM )

		LOACTION_ID.COLLECTION_ID.PACKAGE_NAME 

		ACTION ( ADD / REPLACE ) 
		
		
		
		
MAIN COMPILE :
			APPLICATION PLAN (REQUEST SQL QUERY EXECUTE TO RS )
						RUNTIME SUPERVISOR ( DOES CRUD AND REQUEST FOR DATA TO DATA MANAGER ) 
									DATA MANAGER ( RETRIVES DATA FROM DATABASE & DOES THE IO OPERATION ) 
											BUFFER MAANAGER ( IS USED TO TRANSFER DATA IN BUFFER BETWEEN MEDIUMS ) 





LESSON 10 ----------------------------------------EMBEDDED SQL-----------------

LESSON 11 ----------------------------------------INDICATORS-----------------
	
	****************************INDICATOR IS HALF WORD BINARY 
	
	
		INDICATORS ===> -2 =  DATA CONVERSION ERROR 
						-1 = NULL FETCHED 
						0 = CRT 
						POSITIVE VALUES = TRUNCATED VALUES 
						- 305	(SQLCODE) = > NULL FETCHED AND NOT HANDLED 
						
						
						
						
						
		USE OF INDICATORS IN QUERIES:
				SELECT : 
				
						USE INDICATORS IN INTO CLAUSE ALONG WITH HOST VARIABLES 
					
				
				INSERT :
				
						VALUES CLAUSE 
						
				UPDATE :

						SET CLAUSE 


Lesson  13-----------------------cursor 

		DECLARE CURSORNAME CURSOR (IN WS) 
			FOR SELECT 
			FOR UPDATE OF COLUMNNAME (IF UPDATE IS NEEDED) 
		
		OPEN CURSORNAME
		
		FETCH CURSOR NAME
			UPDATE ________________ WHERE CURRENT OF CURSORNAME
		
		CLOSE CURSORNAME 
				
		WITH HOLD : TO USE COMMIT ALONG WITH FETCH 		
				
				
						

LESSON 14 ----------------------------------------SQLCA-----------------						
				
			SQLCODE IS FULL WORD BINARY	
				
				
			WHENEVER SHOULD BE CODED BEFORE THE SQL QUERY IN COBOL 	
				
			USING A ROLLBACK COMMAND IN WHICHEVER PARA IS MENITON IN WHENEVER CLAUSE IS MUST 	
				
				
	DSNTIAR(ERR REPORT SUB PROG)= TAKES ERROR FROM COMMUNICATION AREA AND CONVERTS IT TO A READABLE ONE AND DISPLAYS 			
				
				
			After an INSERT, DELETE, or UPDATE statement, the SQLERRD(3) contains the number of rows that the statement has affected	

				
				
				
LESSON 15 ----------------------------------------TRANSACTIONS-----------------				
				
				TRANSACTIONS = COMMIT AND ROLLBACK 
				
				ONE PROGRAM CAN HAVE ONE OR MANY TRANSACTIONS 
				
				ONE TRANSACTION MAY CONTAIN ONE OR MORE SQL OPERATIONS IN IT 
				
				EVEN IF ONE SQL OPERATION FAILS THE WHOLE TRANSACTION ROLLS BACK 
				
				TRANSACTIONS CAN ALSO BE A UNIT OF RECOVERY 
				
				


LESSON 16 ----------------------------------------ISOLATION LEVEL-----------------

		PROBLEMS IN MULTI USER ENVIRONMENT :
		
					LOST UPDATE( TWO UPDATES SAME TIME , ONE UPD LOST )
					UNCOMMITTED READ ( NO COMMIT BEFORE READ )
					NON REPEATABLE READ ( TWO TIMES READ DONE ON ONE REOCRD AND FETCHES TWO DIFF VALUES )
					PHANTOM READ ( NOT SATISFY COND ONE TIME AND SATISFIES COND SECOND TIME )



		ISOLATION LEVELS :
				UNCOMMITTED READ (UR) = WHERE MULTI USER PROBLEMS OCCUR 
										ONLY LOCKS WHEN THE DATA RETRIVED UPON ARE PERFROMED WITH DML COMMANDS
										EXCEPT LOST UPDATE AL OTHER IS POSSIBLE 
										
				CURSOR STABILITY = HERE LOST UPDATE AND UR CANNOT OCCUR , 
									LOCKS WHERE CUROSR POIUNTS 
									( NON RR , PHANTOMS MAY OCCUR )
									
				READ STABILITY = USE THIS TRANSACTION WHEN U WANT BOTH CONCURRENCY AND ALSO WANT DATA TO BE STABLE WHEN NEEDS TO PERFORM TRANSACTION 
				( PHANTOMS CAN OCCUR ) 
				
				REPEATED READ  = LOCKS WHOLE TABLE IF QUERY REFERENCE WHOLE TABLE 
								CONCURRENCY IS NOT POSSIBLE 
								EVEM PHANTOMS IS NOT POSSIBLE 




	LOCK PARAMTERS :
			ACQUIRE , RELEASE(IN BIND)  
			LOCKSIZE{ PAGE, TABLE , TABLESPACE, ANY } PARAMETER IN ( DDL COMMAND )
			LOCK TABLE ( SQL QUERY STATEMENT )
			
			ANY = DEFAULTS TO PAGE LOCK ONLY*****************************************************
			
			A SINGLE BIG LOCK IS WAY MORE BETTER THAN MANY SMALL LOCKS 






LESSON - 7 ===================================================================



	STORAGE GROUPS : ------------------ STORAGE GROUPS ARE UNIQUELY DEFINED COLLECTION OF DASD VOLUMES 
			
			COLLETION OF STORED DATA ARE DIVIDED INTO DISJOINT DATABASE 
								IT IS DIVIDED INTO SEVERAL SPACES 
											THOSE SPACES INTO TABLE SPACE AND INDEX SPACE 
													SPACE CAN DYNAMICALLY HAVE TABLE ,, INDEX 
													SPACE IS COLLECTION OF PAGES 
			
	
			THESE STORAGE GROUPS ARE STORED IN PHYSICAL DEVICES BY MEANS OF STORAGE VOLUMES 
	
	

	TABLES 
		COLLECTION OF TABLES IN TABLE SPACE 
			COLLECTION OF PAGES ARE CALLED AS SPACE 
				PAGES ARE BLOCKS IN PHYSICAL STORAGE 


	OBJECTS = TABLES AND THEIR INDEXES 
	THOSE OBJECTS THAT BELONG TO SAME USER IS CALLED AS SCHEMA 
	
	
	TABLESCAPE IS ADDRESS SPACE IN DASD WHICH HOLDS 1 OR 2 TABLES IN IT.
	
	DASD > STORAGE GROUPS > VOLUMES > DATASETS > TABLE & INDEX 
	
	
	INDEX = USED FOR FASTER RETREIVAL OF DATA FROM THE TABLE 

	VIEW 
	
	VIEWS CAN BE ACCESSED UNDER SYSIBM.SYSVIEWS TABLES 
	
	
	
	=  VIEW IS THE COMBINATION OR ONE OR TWO TABLES 
			IS NOT A PHYSICAL , IT IS LOGICAL OR VIRTUAL TABLE 
			HIDES OWNERSHIP DETAILS OF TABLE OR OBJECT 
			
					MAIN USAGE ---------------------
					
						TO RESOLVE THE COMPLEX SELECT QUERY BY PLACING IT AS AN SUBQUERY INSIDE VIEW 
						TO PROVIDE SECURITY TO ORIGINAL TABLE 
						CHANGES MADE IN DATA IN VIEW WILL ALSO BE REFLECTED IN THE TABLE  
						

					SYNTAX : 
							CREATE VIEW VIEWNAME AS ( SELECT QUERY )
							
							
	SYNONYMS : ALSO CALLED AS ALIAS 
				USED FOR HIDING ACTUAL OBJECT INFORMATIONS 
				USED FOR SECURITY 
			    SYNONYMS IS LIKE A ANOTHER NAME TO CALL THE TABLE WHICH HAS A ACTUAL NAME 
				
				SYNTAX :
							CREATE SYNONYMS SYNONYM NAME FOR OBJECT_NAME 
							
							
	ALTER : 
	
			USED TO ADD CONSTRAINS AND COLUMNS 
			USED TO DROP CONSTRAINS AND COLUMSN 
			USED TO CHANGE THE DATATYPE OF A COLUMNS AND ALSO THE CONSTRAINT 
							SYNTAX :   
										ALTER TABLE TABLE NAME (ADD/DROP/SET)OBJECT NAME 
										ALTER TABLE TABLE_NAME SET ALTER COLUMN_NAME DATATYPE 


	DROP :
				DROP CANNOT BE DONE TO A PARENT TABLE IF IT REFERENCES TO CHILD TABLE USING REFERENTIAL CLAUSE 
				
				TO DO THAT WE USE : 
				
									DROP TABLE TABLE_NAME CASCADE CONSTRAINTS 
									
									
	CATALOGS : 
	
				CATALOGS ARE LIKE DATASETS WHICH STORES ALL THE OBJECT LEVEL DATAS
				IT HAS ENTRIES OF ALL DB2 OBJECTS 
				
				
				EXAMPLE :
				
						SYSTABLES, SYSTABLESPACE, SYSINDEX, SYSTOGROUP(WHICH IS STORAGE GROUPS)
				
						
	